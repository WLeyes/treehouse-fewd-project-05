/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// scss/utilities/_mixins.scss :  Mixins for: Media Queries, Flexbox settings, Element and Modifier BEM Selectors
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
// BEM Selectors
//////////////////////////////////////////////////////////////////////////////
@mixin e($element) {
  &__#{$element} {
    @content;
  }
}


@mixin m($element) {
  &--#{$element} {
    @content;
  }
}


// Same as the 2 above, but as a single function - just trying to push my knowledge
@mixin bem($element, $selector: $selector--element) {
  @if $selector == '__' or $selector == '--'{
    &#{$selector}#{$element} {
      @content;
    }
  }
  @else {
    @error '\"#{$element}\" is not a valid selector element! options are: \"#{$selector--element}\" (default) or \"#{$selector--modifier}\"'
  }
}

//////////////////////////////////////////////////////////////////////////////
// Images
//////////////////////////////////////////////////////////////////////////////

// Image replace
@mixin image-replace($image, $width, $height, $display: block) {
  background-image: url('#{$path--relative}/#{$image}');
  background-repeat: no-repeat;
  width: $width;
  height: $height;
  display: $display;
}


//text
@mixin text($font-size: $base__font-size, $line-height: $base__line-height, $font-weight: null, $color: null) {
  font-size:   $font-size;
  line-height: $line-height;
  font-weight: $font-weight;
  color: $color;
}

// Adjacent sibling margins : http://blog.teamtreehouse.com/sass-tip-double-ampersand-selector
@mixin doubly($margin: 1em) {
  & + & {
    margin-left: $margin;
    @content;
  }
}

//////////////////////////////////////////////////////////////////////////////
// Theme Colors
//////////////////////////////////////////////////////////////////////////////

// Color Theme
// $map from config colormap
// $selector inserts BEM modifier '--' by default, this allow more meaningful naming in the grid color map

@mixin bg-colors($map, $selector: $selector--modifier) {
  @each $theme, $color in $map {
    &#{$selector}#{$theme} {
      background-color: $color;
      @extend %btn;
    }
  }
}


//////////////////////////////////////////////////////////////////////////////
// Media Queries
//////////////////////////////////////////////////////////////////////////////

// Media query - breakpoints
@mixin media-query($breakpoint) {
  $value: map-get($breakpoints, $breakpoint);
  $sm:    map-get($breakpoints, 'sm');
  @if $value < $sm {
    @media (max-width: $value) {
      @content;
    }
  }
  @else {
    @media (min-width: $value) {
      @content;
    }
  }
}

//////////////////////////////////////////////////////////////////////////////
// Helpers
//////////////////////////////////////////////////////////////////////////////

// Pseudo elements
@mixin pseudo-element(
$element,
$element-width:  null,
$element-height: null
) {
  @if $element == 'before' or $element == 'after' {
    &:#{$element} {
      @extend %pseudos;
      width: $element-width;
      height: $element-height;
      @content;
    }
  }
  @else {
    @error '\"#{$element}\" is not a valid pseudo-element!'
  }
}


//////////////////////////////////////////////////////////////////////////////
// Grid System
//////////////////////////////////////////////////////////////////////////////

// Calculate grid columns
@include media-query('med'){
  @for $i from 1 through $grid-column-count {
    $context: grid-context($grid-column-width, $grid-column-count, $grid-gutter-width) !global;
    $target: ($grid-column-width * $i) + ($grid-gutter-width * ($i - 1));
    .grid__col--#{$i} {
      width: percentage($target/$context);
    }
  }
}


// Column style
[class^='grid__col--'] {
  @media (min-width: 1px) and (max-width: 768px) {
    margin-top: em(12px);
    margin-bottom:  em(12px);
  }
  @media (min-width: 769px) {
    @include doubly(percentage($grid-gutter-width / $context));
    float: left;
    min-width: 1px;
    padding-left: 10px;
    padding-right: 10px;
    &:last-of-type {
      float: right;
    }
  }
}
